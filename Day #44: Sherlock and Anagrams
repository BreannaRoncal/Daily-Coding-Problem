"""
Two strings are anagrams of each other if the letters of one string can be rearranged to form the other string. 
Given a string, find the number of pairs of substrings of the string that are anagrams of each other. 

Example:
  s = mom
  The list of all anagrammatic pairs is [m, m], [mo, om] at positions [[0], [2]], [[0, 1], [1, 2]] respectively.
"""

from collections import defaultdict, Counter

import os

#
# Complete the 'sherlockAndAnagrams' function below.
#
# The function is expected to return an INTEGER.
# The function accepts STRING s as parameter.
#

def sherlockAndAnagrams(s):
    num_of_pairs = 0
    sub_dic = Counter(s)
    
    #get substrings
    for i in range(2, len(s)):
        sub = s[0 : i]
        l = len(sub)
        #sorted because it doesn't matter for an anagram
        #ie m,o is same as o,m
        sub_dic["".join(sorted(sub))] += 1
        
        #
        for j in range(1, len(s)):
            if j + l <= len(s):
                #found pair
                sub_dic["".join(sorted(s[j : j + l]))] += 1
    
    #get number of pairs
    #divide by 2 because  counted each pair twice
    for val in sub_dic.values():
        num_of_pairs += val * (val - 1) // 2
                
    return num_of_pairs

if __name__ == '__main__':
    fptr = open(os.environ['OUTPUT_PATH'], 'w')

    q = int(input().strip())

    for q_itr in range(q):
        s = input()

        result = sherlockAndAnagrams(s)

        fptr.write(str(result) + '\n')

    fptr.close()
