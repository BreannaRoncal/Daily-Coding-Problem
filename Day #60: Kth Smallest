Given an array arr[] and an integer k where k is smaller than the size of the array, the task is to find the kth smallest element in the given array.

Follow up: Don't solve it using the inbuilt sort function.

Examples :

Input: arr[] = [7, 10, 4, 3, 20, 15], k = 3
Output:  7
Explanation: 3rd smallest element in the given array is 7.

Input: arr[] = [2, 3, 1, 20, 15], k = 4 
Output: 15
Explanation: 4th smallest element in the given array is 15.

Expected Time Complexity: O(n+(max_element) )
Expected Auxiliary Space: O(max_element)

Constraints:
1 <= arr.size <= 106
1<= arr[i] <= 106
1 <= k <= n

#User function Template for python3


class Solution:
    
    def partition(self, arr, low, high, pivot):
        while low <= high:
            while arr[low] < pivot:
                low += 1
            while arr[high] > pivot:
                high -= 1
            if low <= high:
                arr[low], arr[high] = arr[high], arr[low]
                low += 1
                high -= 1
        return low
    
    def quickSort(self, arr, low, high):
        if low < high:
            mid = (low + high) // 2
            pivot = arr[mid]
            partition_index = self.partition(arr, low, high, pivot)
            
            # sort left side
            self.quickSort(arr, low, partition_index - 1)
            
            # sort right side
            self.quickSort(arr, partition_index, high)
    
    def kthSmallest(self, arr,k):
        low = 0
        high = len(arr) - 1
        self.quickSort(arr, low, high)
        return arr[k - 1]
        
        
        



#{ 
 # Driver Code Starts
#Initial Template for Python 3

#contributed by RavinderSinghPB
if __name__ == '__main__':
    import random
    t = int(input())
    for tcs in range(t):
        # n = int(input())
        arr = list(map(int, input().strip().split()))
        k = int(input())
        ob = Solution()
        print(ob.kthSmallest(arr, k))

# } Driver Code Ends
