Given a Circular Linked List. The task is to delete the given node, key in the circular linked list, and reverse the circular linked list.

Note: You don't have to print anything, just return head of the modified list in each function.

Examples:

Input: Linked List: 2->5->7->8->10, key = 8

Output: 10->7->5->2 

Explanation:
After deleting 8 from the given circular linked list, it has elements as 2, 5, 7, 10. Now, reversing this list will result in 10, 7, 5, 2.

Input: Linked List: 1->7->8->10, key = 8

Output: 10->7->1

Explanation: 
After deleting 8 from the given circular linked list, it has elements as 1, 7,10. Now, reversing this list will result in 10, 7, 1.

Expected Time Complexity: O(n)
Expected Auxillary Space: O(1)

#User function Template for python3
'''
class Node:
    def __init__(self, data):
        self.data = data
        self.next = None

'''
class Solution:
    # Function to reverse a circular linked list
    
    def reverse(self, head):
        #code here
        
        # size 0 or 
        if not head or not head.next:
            return head
            
        prevNode = None
        currNode = head
        nextNode = currNode.next
        
        while True:
            nextNode = currNode.next
            currNode.next = prevNode
            prevNode = currNode
            currNode = nextNode
            
            # end of circle
            if currNode == head:
                break
        head.next = prevNode
        return prevNode
        
    # Function to delete a node from the circular linked list
    def deleteNode(self, head, key):
        #code here
        if not head:
            return None
        
        
        # if the first node has to be deleted
        if head.data == key:
            temp = head
            
            while temp.next != head:
                temp = temp.next
            if head == temp:
                return None
            temp.next = head.next
            return head.next
            
        # if the key is not the head
        currNode = head
        while currNode.next != head:
            if currNode.next.data == key:
                currNode.next = currNode.next.next
                return head
            currNode = currNode.next
            
        return head
        


#{ 
 # Driver Code Starts
class Node:

    def __init__(self, data):
        self.data = data
        self.next = None


def printList(head):
    if head is None:
        print("empty")
        return

    temp = head
    while True:
        print(temp.data, end=" ")
        temp = temp.next
        if temp == head:
            break
    print()


if __name__ == "__main__":
    t = int(input())
    for _ in range(t):
        arr = list(map(int, input().split()))
        key = int(input())

        head = Node(arr[0])
        tail = head
        for i in range(1, len(arr)):
            tail.next = Node(arr[i])
            tail = tail.next
        tail.next = head  # Make the list circular

        ob = Solution()
        head = ob.deleteNode(head, key)
        head = ob.reverse(head)
        printList(head)

# } Driver Code Ends
