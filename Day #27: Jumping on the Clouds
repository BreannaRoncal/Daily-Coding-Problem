"""
Jumping on the Clouds

There is a new mobile game that starts with consecutively numbered clouds. Some of the clouds are thunderheads 
and others are cumulus. The player can jump on any cumulus cloud having a number that is equal to the number 
of the current cloud plus 1 or 2. The player must avoid the thunderheads. Determine the minimum number of jumps 
it will take to jump from the starting postion to the last cloud. It is always possible to win the game.

For each game, you will get an array of clouds numbered 0 if they are safe or 1 if they must be avoided.

Complete the jumpingOnClouds function in the editor below.

jumpingOnClouds has the following parameter(s):

    -int c[n]: an array of binary integers
    -returns int: the minimum number of jumps required
    
Input Format:
    The first line contains an integer n, the total number of clouds. The second line contains n space-separated 
    binary integers describing clouds c[i] where 0 <= i < n.
    
Example Input:
    7
    0 0 1 0 0 1 0
    
Example Output:
    4
"""


import os

# Complete the jumpingOnClouds function below.
def jumpingOnClouds(c):
    total = 0
    current = 0
    last_cloud = len(c) - 1
    
    #Loop until it reaches the last cloud
    while current < last_cloud:
        #Check if you can jump twice to make the minimum number of jumps
        #and that you don't jump out of bounds
        if (current + 2 <= last_cloud and c[current + 2] == 0):
            total += 1
            current += 2
        elif (current + 1 <= last_cloud and c[current + 1] == 0):
            total += 1
            current += 1
                
    return total

if __name__ == '__main__':
    fptr = open(os.environ['OUTPUT_PATH'], 'w')

    n = int(input())

    c = list(map(int, input().rstrip().split()))

    result = jumpingOnClouds(c)

    fptr.write(str(result) + '\n')

    fptr.close()
