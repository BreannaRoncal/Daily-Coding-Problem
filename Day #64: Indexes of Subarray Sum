Indexes of Subarray Sum

Given an unsorted array arr containing only non-negative integers, your task is to find a continuous subarray (a contiguous sequence of elements) whose sum equals a specified value s. You need to return the 1-based indices of the leftmost and rightmost elements of this subarray.

Examples:

Input: arr[] = [1,2,3,7,5], s = 12
Output: [2, 4]
Explanation: The sum of elements from 2nd to 4th position is 12.

Input: arr[] = [1,2,3,4,5,6,7,8,9,10], s = 15,
Output: [1, 5]
Explanation: The sum of elements from 1st to 5th position is 15.

Input: arr[] = [7,2,1], s = 2
Output: [2, 2]
Explanation: The sum of elements from 2nd to 2nd position is 2.

Input: arr[] = [5,3,4], s = 2
Output: -1
Explanation: There is no subarray with sum 2.

Constraints:
1 <= arr.size()<= 10^6
0 <= arr[i] <= 10^3
0 <= s <= 10^9



#User function Template for python3
class Solution:
    def subArraySum(self, arr, s):
        # code here
        n = len(arr)
        temp_sum = 0
        result = []
        j = 0
        for i in range(n):
            temp_sum += arr[i]
            while j < i and temp_sum > s:
                temp_sum -= arr[j]
                j += 1
            if temp_sum == s:
                result.append(j+1)
                result.append(i+1)
                return result
        result.append(-1)
        return result


#{ 
 # Driver Code Starts
# Initial Template for Python 3

if __name__ == '__main__':
    tc = int(input().strip())
    while tc > 0:
        arr = list(map(int, input().strip().split()))
        d = int(input().strip())
        ob = Solution()
        result = ob.subArraySum(arr, d)
        print(" ".join(map(str,
                           result)))  # Print the result in the desired format
        tc -= 1

# } Driver Code Ends
