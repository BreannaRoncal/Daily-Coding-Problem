"""
Sherlock considers a string to be valid if all characters of the string appear the same number of times. 
It is also valid if he can remove just 1 character at 1 index in the string, and the remaining characters will occur the same number of times. Given a string s,
determine if it is valid. If so, return YES, otherwise return NO.

Example:
  s = abc
  This is a valid string because frequencies are {a:1, b:1, c:1}.

  s = abcc
  This is a valid string because we can remove one c and have 1 of each character in the remaining string.

  s = abcc
  This string is not valid as we can only remove 1 occurrence of c. That leaves character frequencies of {a:1, b:1, c:2}. 
  
  Returns a string either YES or NO
  
"""

#!/bin/python3

import math
import os
import random
import re
import sys
from collections import Counter

#
# Complete the 'isValid' function below.
#
# The function is expected to return a STRING.
# The function accepts STRING s as parameter.
#

def isValid(s):
    #count each character frequency
    s_dic = Counter(s)
    
    #count frequency of each character's frequency
    num_of_counters = Counter(s_dic.values())
    
    #all characters have the same frequency
    if (len(num_of_counters) == 1):
        return "YES"
    #cannot remove one character at one index to make valid
    elif (len(num_of_counters) > 2):
        return "NO"
    #check if I can remove one character at one index to make valid
    else:
        max_val = max(num_of_counters.values())
        key1, key2 = num_of_counters.keys()
        
        if (max_val == len(s_dic) - 1):
            if (abs(key1 - key2) == 1):
                return "YES"
            elif (min(key1, key2) == 1):
                if (num_of_counters[1] == 1):
                    return "YES"
        return "NO"
    
    

if __name__ == '__main__':
    fptr = open(os.environ['OUTPUT_PATH'], 'w')

    s = input()

    result = isValid(s)

    fptr.write(result + '\n')

    fptr.close()
