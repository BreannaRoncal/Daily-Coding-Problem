"""
Stacks: Balanced Brackets

A bracket is considered to be any one of the following characters: (, ), {, }, [, or ]. Two brackets are 
considered to be a matched pair if the an opening bracket (i.e., (, [, or {) occurs to the left of a 
closing bracket (i.e., ), ], or }) of the exact same type. 

There are three types of matched pairs of brackets: [], {}, and ().

A matching pair of brackets is not balanced if the set of brackets it encloses are not matched. 
For example, {[(])} is not balanced because the contents in between { and } are not balanced. 
The pair of square brackets encloses a single, unbalanced opening bracket, (, and the pair of 
parentheses encloses a single, unbalanced closing square bracket, ].

By this logic, we say a sequence of brackets is balanced if the following conditions are met:
    -It contains no unmatched brackets.
    -The subset of brackets enclosed within the confines of a matched pair of brackets is also a matched pair of brackets.

Given n strings of brackets, determine whether each sequence of brackets is balanced. If a string is 
balanced, return "YES". Otherwise, return "NO".

Input Format:
    -The first line contains a single integer n, the number of strings.
    -Each of the next n lines contains a single string s, a sequence of brackets.
    
Example Input:
    3
    {[()]}
    {[(])}
    {{[[(())]]}}
    
Example Output:
    YES
    NO
    YES
"""
import os

# Complete the isBalanced function below.
def isBalanced(s):
    #create partners for each bracket
    opening = ['(', '[', '{']
    closing = {')' : '(', ']' : '[', '}' : '{'}
    
    bracket_stack = []
    
    #brackets are not balanced if it is an odd number
    if (len(s) % 2 != 0):
        return "NO" 
    
    #Check if each opening bracket has a matching closing bracket
    for i in s:
        if i in opening:
            bracket_stack.append(i)
        elif i in closing:
            if (len(bracket_stack) == 0) or (bracket_stack.pop() != closing[i]):
                return "NO"
            
    #If the bracket_stack is not empty, then it has an extra bracket
    if len(bracket_stack) >= 1:
        return "NO"
    
    return "YES"

if __name__ == '__main__':
    fptr = open(os.environ['OUTPUT_PATH'], 'w')

    t = int(input())

    for t_itr in range(t):
        s = input()

        result = isBalanced(s)

        fptr.write(result + '\n')

    fptr.close()
