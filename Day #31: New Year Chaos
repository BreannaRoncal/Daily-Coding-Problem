"""
New Year Chaos

It is New Year's Day and people are in line for the Wonderland rollercoaster ride. Each person wears a 
sticker indicating their initial position in the queue. Initial positions increment by 1 from 1 at the 
front of the line to n at the back.

Any person in the queue can bribe the person directly in front of them to swap positions. If two people 
swap positions, they still wear the same sticker denoting their original places in line. One person can 
bribe at most two others. For example, if n = 8 and Person 5 bribes Person 4, the queue will look like 
this: 1, 2, 3, 5, 4, 6, 7, 8.

Fascinated by this chaotic queue, you decide you must know the minimum number of bribes that took place 
to get the queue into its current state. If anyone has bribed more than two people, the line is too 
chaotic to compute the answer.

Complete the function minimumBribes in the editor below.
    minimumBribes has the following parameter(s):
        -int q[n]: the positions of the people after all bribes
        -returns: none. Print the minimum number of bribes necessary or "Too chaotic" if someone has 
        bribed more than 2 people. 


Input Format:
    The first line contains an integer t, the number of test cases.
    Each of the next t pairs of lines are as follows:
        - The first line contains an integer t, the number of people in the queue
        - The second line has n space-separated integers describing the final state of the queue.
        
Example Input:
    2
    5
    2 1 5 3 4
    5
    2 5 1 3 4
    
Example Output:
    3
    Too Chaotic
    
"""


# Complete the minimumBribes function below.
def minimumBribes(q):
    bribes = 0
        
    for i in range(len(q)):
        #check if the original index is 3 or more spaces away from the new index
        #meaning that someone has bribed more than 2 people
        #+1 because the queue starts at 1 not 0
        if q[i] - (i + 1) >= 3:
            print("Too chaotic")
            return
        
        #check if someone bribed the person in front of them
        #use max to optimize the solution
        #use -2 because no one can be more than 2 away from their original spot in line
        #use 0 for the lower max value so we stay in bounds of q
        for j in range(max(0, q[i] - 2),i):
            if q[j] > q[i]:
                bribes += 1
    print(bribes)
            

if __name__ == '__main__':
    t = int(input())

    for t_itr in range(t):
        n = int(input())

        q = list(map(int, input().rstrip().split()))

        minimumBribes(q)
