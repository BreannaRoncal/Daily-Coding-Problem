Count Inversions

Given an array of integers. Find the Inversion Count in the array.  Two elements arr[i] and arr[j] form an inversion if arr[i] > arr[j] and i < j.

Inversion Count: For an array, inversion count indicates how far (or close) the array is from being sorted. If the array is already sorted then the inversion count is 0.
If an array is sorted in the reverse order then the inversion count is the maximum. 

Examples:

Input: arr[] = [2, 4, 1, 3, 5]
Output: 3
Explanation: The sequence 2, 4, 1, 3, 5 has three inversions (2, 1), (4, 1), (4, 3).

Input: arr[] = [2, 3, 4, 5, 6]
Output: 0
Explanation: As the sequence is already sorted so there is no inversion count.

Input: arr[] = [10, 10, 10]
Output: 0
Explanation: As all the elements of array are same, so there is no inversion count.

Constraints:
1 â‰¤ arr.size() â‰¤ 10^5
1 â‰¤ arr[i] â‰¤ 10^4



class Solution:
    #User function Template for python3
    
    # arr[]: Input Array
    # N : Size of the Array arr[]
    #Function to count inversions in the array.
    def __init__(self):
        self.count = 0
        
    def mergeSort(self, arr):
        n = len(arr)
        if n == 0 or n == 1:
            return arr
        mid = n // 2
        left = self.mergeSort(arr[0:mid])
        right = self.mergeSort(arr[mid:])
        result = []
        
        i = 0
        j = 0
        while i < len(left) and j < len(right):
            if left[i] <= right[j]:
                result.append(left[i])
                i += 1
            else:
                self.count += len(left) - i
                result.append(right[j])
                j += 1
        
       
        while i < len(left):
            result.append(left[i])
            i += 1
                
        
        while j < len(right):
            result.append(right[j])
            j += 1
        
        return result
        
    
    def inversionCount(self, arr):
        # Your Code Here
        
        result = self.mergeSort(arr)
        return self.count


#{ 
 # Driver Code Starts
#Initial Template for Python 3

import atexit
import io
import sys

_INPUT_LINES = sys.stdin.read().splitlines()
input = iter(_INPUT_LINES).__next__
_OUTPUT_BUFFER = io.StringIO()
sys.stdout = _OUTPUT_BUFFER


@atexit.register
def write():
    sys.__stdout__.write(_OUTPUT_BUFFER.getvalue())


if __name__ == '__main__':
    t = int(input())
    for tt in range(t):
        a = list(map(int, input().strip().split()))
        obj = Solution()
        print(obj.inversionCount(a))

# } Driver Code Ends
