"""
Subarray Division


Given a chocolate bar, two children, Lily and Ron, are determining how to share it. Each of the 
squares has an integer on it.

Lily decides to share a contiguous segment of the bar selected such that:
    -The length of the segment matches Ron's birth month, and,
    -The sum of the integers on the squares is equal to his birth day.

You must determine how many ways she can divide the chocolate.
Consider the chocolate bar as an array of squares, s = [2, 2, 1, 3, 2]. She wants to find segments 
summing to Ron's birth day, d = 4 with a length equalling his birth month, m = 2. In this case, there 
are two segments meeting her criteria: [2, 2] and [1, 3].

Input Format:
    -The first line contains an integer n, the number of squares in the chocolate bar.
    -The second line contains n space-separated integers s[i], the numbers on the chocolate squares where 0 <= i <= n.
    -The third line contains two space-separated integers, d and m, Ron's birth day and his birth month.
    
Example Input:
    5
    1 2 1 3 2
    3 2
    
Example Output:
    2
"""

import os

# Complete the birthday function below.
def birthday(s, d, m):
    total = 0
    
    #Iterate through the list and find a subarray with the length of m
    #If the subarray is equal to d, then increment the total counter
    for i in range(len(s)):
        if sum(s[i:i+m]) == d:
            total += 1
    
    return total

if __name__ == '__main__':
    fptr = open(os.environ['OUTPUT_PATH'], 'w')

    n = int(input().strip())

    s = list(map(int, input().rstrip().split()))

    dm = input().rstrip().split()

    d = int(dm[0])

    m = int(dm[1])

    result = birthday(s, d, m)

    fptr.write(str(result) + '\n')

    fptr.close()
