"""
Parenthesis Checker

Given a string s, composed of different combinations of '(' , ')', '{', '}', '[', ']', verify the validity of the arrangement.
An input string is valid if:

         1. Open brackets must be closed by the same type of brackets.
         2. Open brackets must be closed in the correct order.

Examples :
  Input: s = "[{()}]"
  Output: true
  Explanation: All the brackets are well-formed.

  Input: s = "[()()]{}"
  Output: true
  Explanation: All the brackets are well-formed.

  Input: s = "([]"
  Output: False
  Explanation: The expression is not balanced as there is a missing ')' at the end.

  Input: s = "([{]})"
  Output: False
  Explanation: The expression is not balanced as there is a closing ']' before the closing '}'.
Constraints:
  1 ≤ s.size() ≤ 10^6
  s[i] ∈ {'{', '}', '(', ')', '[', ']'}

"""


class Solution:
    def isBalanced(self, s):
        # code here
        open_parens = ['(', '{', '[']
        closed_parens = [')', '}', ']']
        
        parens = []
        
        for p in s:
            #print('p:' + p)
            if p in open_parens:
                parens.append(p)
            elif p in closed_parens:
                if len(parens) == 0:
                    return False
                curr_open = parens.pop()
                #print("curr" + curr_open)
                if curr_open == '(' and p != ')':
                    return False
                if curr_open == '{' and p != '}':
                    return False
                if curr_open == '[' and p != ']':
                    return False
        #print(len(parens))
        if len(parens) != 0:
            return False
        return True


#{ 
 # Driver Code Starts
#Initial Template for Python 3

import atexit
import io
import sys

#Contributed by : Nagendra Jha

_INPUT_LINES = sys.stdin.read().splitlines()
input = iter(_INPUT_LINES).__next__
_OUTPUT_BUFFER = io.StringIO()
sys.stdout = _OUTPUT_BUFFER


@atexit.register
def write():
    sys.__stdout__.write(_OUTPUT_BUFFER.getvalue())


if __name__ == '__main__':
    test_cases = int(input())
    for cases in range(test_cases):
        s = str(input())
        obj = Solution()
        if obj.isBalanced(s):
            print("true")
        else:
            print("false")
        print("~")

# } Driver Code Ends
